name: Deploy Vite Project using CDK (TypeScript)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    permissions: 
      contents: read
      id-token: write
      pull-requests: read # allows SonarCloud to decorate PRs with analysis results
      security-events: write
      actions: read

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set outputs
        id: set
        run: |
          echo "app-name=cloudvisualizer" >> ${GITHUB_OUTPUT}
          echo "app-type=frontend" >> ${GITHUB_OUTPUT}
          echo "account-id=970547379814" >> ${GITHUB_OUTPUT}
          echo "region=eu-central-1" >> ${GITHUB_OUTPUT}
          echo "repository-name=cloudvisualizer" >> ${GITHUB_OUTPUT}
          echo "environment=prd" >> ${GITHUB_OUTPUT}
          echo "cpu=256" >> ${GITHUB_OUTPUT}
          echo "memory=512" >> ${GITHUB_OUTPUT}
          echo "image-version=1" >> ${GITHUB_OUTPUT}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: check-code-quality
        uses: ./actions/check-code-quality
        with:
          language: TypeScript
          dependency-manager: npm

      - name: run test coverage
        run: npm run test:coverage

      - name: Install Dependencies
        run: npm install

      - name: Build Vite Project
        run: npm run build

      - name: Create or update ECR repository
        uses: ./actions/deploy-aws-ecr-repository
        with:
          account-id: ${{ steps.set.outputs.account-id }}
          region: ${{ steps.set.outputs.region }}
          stack-name: ECR-${{ steps.set.outputs.app-name }}
          app-name: ${{ steps.set.outputs.app-name }}
          environment: ${{ steps.set.outputs.environment }}
          repository-name: ${{ steps.set.outputs.repository-name }}
          immutable-tags: true
          stackset: ecr

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ steps.set.outputs.region }}
          role-to-assume: arn:aws:iam::${{ steps.set.outputs.account-id }}:role/gh-actions-${{ github.event.repository.name }}
          role-session-name: GitHubActions

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Log Docker into ECR ${{ steps.login-ecr.outputs.registry }}
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.login-ecr.outputs.registry }}

      - name: Set resources
        id: set-resources
        shell: bash
        run: |
          # Set defaults
  
          DOCKER_CONTEXT=${{ github.workspace }}
  
          echo "dockerContext=${DOCKER_CONTEXT}" >> ${GITHUB_OUTPUT}
          echo "dockerFile=${DOCKER_CONTEXT}/Dockerfile" >> ${GITHUB_OUTPUT}  
  
          echo "useLatestTag=false" >> ${GITHUB_OUTPUT}

      - name: Set image path for runner image
        id: set-image-path
        shell: bash
        run: |
            REPOSITORY=${{ steps.set.outputs.repository-name }}
            echo "image-path=${{ steps.login-ecr.outputs.registry }}/${REPOSITORY}" >> ${GITHUB_OUTPUT}
            echo "imageRepository=${REPOSITORY,,}" >> ${GITHUB_OUTPUT}

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3
    
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.set-image-path.outputs.image-path }}
          flavor: |
            latest=${{ steps.set-resources.outputs.useLatestTag }}
            prefix=
            suffix=.${{ github.run_id }}
          tags: |
            type=raw,value=1
        
      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: "${{ steps.set-resources.outputs.dockerContext }}"
          build-contexts: |
            "repo_path=${{ github.workspace }}"
          file: ${{ steps.set-resources.outputs.dockerFile }}
          load: false
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy AWS fargate
        id: deploy-fargate
        uses: ./actions/deploy-aws-fargate
        with:
          app-name: ${{ steps.set.outputs.app-name }}
          app-type: ${{ steps.set.outputs.app-type }}
          account-id: ${{ steps.set.outputs.account-id }}
          region: ${{ steps.set.outputs.region }}
          environment: ${{ steps.set.outputs.environment }}
          ec2-alb-listener-rule-prio: 1
          cpu: ${{ steps.set.outputs.cpu }}
          memory: ${{ steps.set.outputs.memory }}
          image-version: ${{ steps.set.outputs.image-version }}
          repository-name: ${{ steps.set.outputs.repository-name }}
          reuse-alb: false
          main-entrypoint: npm run preview
          container-port: 5173
