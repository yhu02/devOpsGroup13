name: Deploy Vite Project using CDK (TypeScript)

on:
  push:
    branches:
      - main
  workflow_dispatch:
    

jobs:
  deploy:
    permissions: 
      contents: read
      id-token: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm install

      - name: Build Vite Project
        run: npm run build


      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-north-1
          role-to-assume: arn:aws:iam::970547379814:role/deploy-gh-actions

      - name: Install CDK globally and install projects dependencies
        shell: bash
        working-directory: infra
        run: |
          npx cdk bootstrap
          npm i -g aws-cdk
          npx cdk deploy --all --require-approval never

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Log Docker into ECR ${{ steps.login-ecr.outputs.registry }}
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.login-ecr.outputs.registry }}

      - name: Set image path for runner image
        id: set-image-path
        shell: bash
        run: |
            REPOSITORY=ecr-repository
            echo "image-path=${{ steps.login-ecr.outputs.registry }}/${IMAGE_NAME,,}" >> ${GITHUB_OUTPUT}
            echo "imageRepository=${REPOSITORY,,}" >> ${GITHUB_OUTPUT}

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: "/etc/buildkit/buildkitd.toml"

      - name: Set resources
        id: set-resources
        shell: bash
        run: |
          # Set defaults
  
          DOCKER_CONTEXT=".."
  
          echo "dockerContext=${DOCKER_CONTEXT}" >> ${GITHUB_OUTPUT}
          echo "dockerFile=${DOCKER_CONTEXT}/Dockerfile" >> ${GITHUB_OUTPUT}  
  
          echo "IMAGE_NAME=image" >> $GITHUB_ENV
          echo "useLatestTag=false" >> ${GITHUB_OUTPUT}
    
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.set-image-path.outputs.image-path }}
          flavor: |
            latest=${{ steps.set-resources.outputs.useLatestTag }}
            prefix=
            suffix=.${{ github.run_id }}
          #tags: |
          #  type=raw,value=${{ inputs.image-version }}
        
      - name: Build and push Docker image with Artifactory
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: "${{ steps.set-resources.outputs.dockerContext }}"
          build-contexts: |
            "repo_path=${{ github.workspace }}"
          file: ${{ steps.set-resources.outputs.dockerFile }}
          # Just build the non-runner image-types to test the setup, don't push the image to ECR yet
          load: false
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}